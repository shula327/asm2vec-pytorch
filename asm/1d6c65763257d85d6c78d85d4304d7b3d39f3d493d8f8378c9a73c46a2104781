 .name fcn.0002e640
 .offset 000000000002e640
 .file dpkg
 endbr64
 push r15
 push r14
 push r13
 push r12
 push rbp
 push rbx
 mov eax, dword [rsi + CONST]
 mov ebx, dword [rsi + CONST]
 mov r12d, dword [rsi + CONST]
 mov r15d, dword [rsi + CONST]
 mov r14d, dword [rsi]
 mov r9d, dword [rsi + CONST]
 mov r11d, dword [rsi + CONST]
 mov dword [rsp + CONST], eax
 mov ebp, dword [rsi + CONST]
 mov r13d, dword [rsi + CONST]
 mov dword [rsp + CONST], ebx
 mov r10d, dword [rsi + CONST]
 mov ebx, dword [rsi + CONST]
 mov dword [rsp + CONST], r12d
 mov r8d, dword [rsi + CONST]
 mov r12d, dword [rsi + CONST]
 mov dword [rsp + CONST], r15d
 mov ecx, dword [rsi + CONST]
 mov edx, dword [rsi + CONST]
 mov eax, dword [rdi]
 mov esi, dword [rsi + CONST]
 mov r15d, dword [rdi + CONST]
 mov dword [rsp + CONST], ecx
 mov dword [rsp + CONST], edx
 lea edx, [rax + r14 + CONST]
 mov eax, dword [rdi + CONST]
 mov dword [rsp + CONST], esi
 xor eax, dword [rdi + CONST]
 and eax, r15d
 xor eax, dword [rdi + CONST]
 mov ecx, dword [rdi + CONST]
 mov dword [rsp + CONST], r8d
 add eax, edx
 mov edx, dword [rdi + CONST]
 rol eax, CONST
 lea ecx, [rcx + r9 + CONST]
 add eax, r15d
 xor edx, r15d
 and edx, eax
 xor edx, dword [rdi + CONST]
 add edx, ecx
 mov ecx, dword [rdi + CONST]
 rol edx, CONST
 lea esi, [rcx + r8 + CONST]
 mov ecx, r15d
 add edx, eax
 xor ecx, eax
 lea r8d, [r15 + r11 + CONST]
 and ecx, edx
 xor ecx, r15d
 add ecx, esi
 mov esi, eax
 ror ecx, CONST
 xor esi, edx
 add ecx, edx
 and esi, ecx
 xor esi, eax
 add esi, r8d
 mov r8d, dword [rsp + CONST]
 ror esi, CONST
 lea r8d, [rax + r8 + CONST]
 mov eax, edx
 add esi, ecx
 xor eax, ecx
 and eax, esi
 xor eax, edx
 add eax, r8d
 lea r8d, [rdx + rbp + CONST]
 mov edx, ecx
 rol eax, CONST
 xor edx, esi
 add eax, esi
 and edx, eax
 xor edx, ecx
 add edx, r8d
 mov r8d, dword [rsp + CONST]
 rol edx, CONST
 lea r8d, [rcx + r8 + CONST]
 mov ecx, esi
 add edx, eax
 xor ecx, eax
 and ecx, edx
 xor ecx, esi
 add ecx, r8d
 lea r8d, [rsi + r13 + CONST]
 mov esi, eax
 ror ecx, CONST
 xor esi, edx
 add ecx, edx
 and esi, ecx
 xor esi, eax
 add esi, r8d
 mov r8d, dword [rsp + CONST]
 ror esi, CONST
 lea r8d, [rax + r8 + CONST]
 mov eax, edx
 add esi, ecx
 xor eax, ecx
 and eax, esi
 xor eax, edx
 add eax, r8d
 mov r8d, dword [rsp + CONST]
 rol eax, CONST
 lea r8d, [rdx + r8 + CONST]
 mov edx, ecx
 add eax, esi
 xor edx, esi
 and edx, eax
 xor edx, ecx
 add edx, r8d
 lea r8d, [rcx + r10 + CONST]
 mov ecx, esi
 rol edx, CONST
 xor ecx, eax
 add edx, eax
 and ecx, edx
 xor ecx, esi
 add ecx, r8d
 mov r8d, dword [rsp + CONST]
 ror ecx, CONST
 lea r8d, [rsi + r8 + CONST]
 mov esi, eax
 add ecx, edx
 xor esi, edx
 and esi, ecx
 xor esi, eax
 add esi, r8d
 lea r8d, [rax + rbx + CONST]
 mov eax, edx
 ror esi, CONST
 xor eax, ecx
 add esi, ecx
 and eax, esi
 xor eax, edx
 add eax, r8d
 mov r8d, dword [rsp + CONST]
 rol eax, CONST
 lea r8d, [rdx + r8 + CONST]
 mov edx, ecx
 add eax, esi
 xor edx, esi
 and edx, eax
 xor edx, ecx
 add edx, r8d
 lea r8d, [rcx + r12 + CONST]
 mov ecx, esi
 rol edx, CONST
 xor ecx, eax
 add edx, eax
 and ecx, edx
 xor ecx, esi
 add ecx, r8d
 mov r8d, dword [rsp + CONST]
 ror ecx, CONST
 lea r8d, [rsi + r8 + CONST]
 mov esi, eax
 add ecx, edx
 xor esi, edx
 and esi, ecx
 xor esi, eax
 add esi, r8d
 lea r8d, [rax + r9 + CONST]
 mov eax, ecx
 ror esi, CONST
 add esi, ecx
 xor eax, esi
 and eax, edx
 xor eax, ecx
 add eax, r8d
 mov r8d, dword [rsp + CONST]
 rol eax, CONST
 add eax, esi
 lea r8d, [rdx + r8 + CONST]
 mov edx, esi
 xor edx, eax
 and edx, ecx
 xor edx, esi
 add edx, r8d
 mov r8d, dword [rsp + CONST]
 rol edx, CONST
 add edx, eax
 lea r8d, [rcx + r8 + CONST]
 mov ecx, eax
 xor ecx, edx
 and ecx, esi
 xor ecx, eax
 add ecx, r8d
 lea r8d, [rsi + r14 + CONST]
 mov esi, edx
 rol ecx, CONST
 add ecx, edx
 xor esi, ecx
 and esi, eax
 xor esi, edx
 add esi, r8d
 lea r8d, [rax + rbp + CONST]
 mov eax, ecx
 ror esi, CONST
 add esi, ecx
 xor eax, esi
 and eax, edx
 xor eax, ecx
 add eax, r8d
 lea r8d, [rdx + r10 + CONST]
 mov edx, esi
 rol eax, CONST
 add eax, esi
 xor edx, eax
 and edx, ecx
 xor edx, esi
 add edx, r8d
 mov r8d, dword [rsp + CONST]
 rol edx, CONST
 add edx, eax
 lea r8d, [rcx + r8 + CONST]
 mov ecx, eax
 xor ecx, edx
 and ecx, esi
 xor ecx, eax
 add ecx, r8d
 mov r8d, dword [rsp + CONST]
 rol ecx, CONST
 add ecx, edx
 lea r8d, [rsi + r8 + CONST]
 mov esi, edx
 xor esi, ecx
 and esi, eax
 xor esi, edx
 add esi, r8d
 mov r8d, dword [rsp + CONST]
 ror esi, CONST
 add esi, ecx
 lea r8d, [rax + r8 + CONST]
 mov eax, ecx
 xor eax, esi
 and eax, edx
 xor eax, ecx
 add eax, r8d
 lea r8d, [rdx + r12 + CONST]
 mov edx, esi
 rol eax, CONST
 add eax, esi
 xor edx, eax
 and edx, ecx
 xor edx, esi
 add edx, r8d
 lea r8d, [rcx + r11 + CONST]
 mov ecx, eax
 rol edx, CONST
 add edx, eax
 xor ecx, edx
 and ecx, esi
 xor ecx, eax
 add ecx, r8d
 mov r8d, dword [rsp + CONST]
 rol ecx, CONST
 add ecx, edx
 lea esi, [rsi + r8 + CONST]
 mov r8d, edx
 xor r8d, ecx
 and r8d, eax
 xor r8d, edx
 add r8d, esi
 mov esi, dword [rsp + CONST]
 ror r8d, CONST
 add r8d, ecx
 lea esi, [rax + rsi + CONST]
 mov eax, ecx
 xor eax, r8d
 and eax, edx
 xor eax, ecx
 add eax, esi
 mov esi, dword [rsp + CONST]
 rol eax, CONST
 add eax, r8d
 lea esi, [rdx + rsi + CONST]
 mov edx, r8d
 xor edx, eax
 and edx, ecx
 lea ecx, [rcx + r13 + CONST]
 xor edx, r8d
 add edx, esi
 mov esi, eax
 rol edx, CONST
 add edx, eax
 xor esi, edx
 and esi, r8d
 lea r8d, [r8 + rbx + CONST]
 xor esi, eax
 mov dword [rsp + CONST], r8d
 add esi, ecx
 mov ecx, edx
 rol esi, CONST
 add esi, edx
 xor ecx, esi
 mov r8d, ecx
 and r8d, eax
 lea eax, [rax + rbp + CONST]
 xor r8d, edx
 add r8d, dword [rsp + CONST]
 ror r8d, CONST
 add r8d, esi
 xor ecx, r8d
 add ecx, eax
 mov eax, dword [rsp + CONST]
 rol ecx, CONST
 lea eax, [rdx + rax + CONST]
 mov edx, esi
 add ecx, r8d
 xor edx, r8d
 xor edx, ecx
 add edx, eax
 mov eax, dword [rsp + CONST]
 rol edx, CONST
 lea eax, [rsi + rax + CONST]
 mov esi, r8d
 add edx, ecx
 xor esi, ecx
 lea r8d, [r8 + r12 + CONST]
 xor esi, edx
 add esi, eax
 mov eax, ecx
 rol esi, CONST
 xor eax, edx
 add esi, edx
 xor eax, esi
 add eax, r8d
 lea r8d, [rcx + r9 + CONST]
 mov ecx, edx
 ror eax, CONST
 xor ecx, esi
 add eax, esi
 xor ecx, eax
 add ecx, r8d
 mov r8d, dword [rsp + CONST]
 rol ecx, CONST
 lea edx, [rdx + r8 + CONST]
 mov r8d, esi
 add ecx, eax
 xor r8d, eax
 lea esi, [rsi + r13 + CONST]
 xor r8d, ecx
 add r8d, edx
 mov edx, eax
 lea eax, [rax + r10 + CONST]
 rol r8d, CONST
 xor edx, ecx
 add r8d, ecx
 xor edx, r8d
 add edx, esi
 mov esi, ecx
 rol edx, CONST
 xor esi, r8d
 add edx, r8d
 xor esi, edx
 add esi, eax
 mov eax, dword [rsp + CONST]
 ror esi, CONST
 lea eax, [rcx + rax + CONST]
 mov ecx, r8d
 add esi, edx
 xor ecx, edx
 lea r8d, [r8 + r14 + CONST]
 xor ecx, esi
 add ecx, eax
 mov eax, edx
 lea edx, [rdx + r11 + CONST]
 rol ecx, CONST
 xor eax, esi
 add ecx, esi
 xor eax, ecx
 add eax, r8d
 mov r8d, esi
 rol eax, CONST
 xor r8d, ecx
 add eax, ecx
 xor r8d, eax
 add r8d, edx
 mov edx, dword [rsp + CONST]
 rol r8d, CONST
 lea edx, [rsi + rdx + CONST]
 mov esi, ecx
 add r8d, eax
 xor esi, eax
 xor esi, r8d
 add esi, edx
 mov edx, dword [rsp + CONST]
 ror esi, CONST
 lea ecx, [rcx + rdx + CONST]
 mov edx, eax
 add esi, r8d
 xor edx, r8d
 lea eax, [rax + rbx + CONST]
 xor edx, esi
 add edx, ecx
 mov ecx, r8d
 rol edx, CONST
 add edx, esi
 xor ecx, esi
 xor ecx, edx
 add ecx, eax
 mov eax, dword [rsp + CONST]
 rol ecx, CONST
 lea eax, [r8 + rax + CONST]
 mov r8d, esi
 add ecx, edx
 xor r8d, edx
 xor r8d, ecx
 add r8d, eax
 mov eax, dword [rsp + CONST]
 rol r8d, CONST
 lea esi, [rsi + rax + CONST]
 mov eax, edx
 add r8d, ecx
 xor eax, ecx
 xor eax, r8d
 add eax, esi
 lea esi, [rdx + r14 + CONST]
 mov r14d, ecx
 ror eax, CONST
 not r14d
 add eax, r8d
 mov edx, r14d
 or edx, eax
 xor edx, r8d
 add edx, esi
 lea esi, [rcx + r13 + CONST]
 mov ecx, r8d
 rol edx, CONST
 not ecx
 lea r8d, [r8 + r12 + CONST]
 add edx, eax
 or ecx, edx
 xor ecx, eax
 add ecx, esi
 mov esi, eax
 rol ecx, CONST
 not esi
 add ecx, edx
 or esi, ecx
 xor esi, edx
 add esi, r8d
 lea r8d, [rax + rbp + CONST]
 mov ebp, edx
 rol esi, CONST
 not ebp
 add esi, ecx
 mov eax, ebp
 mov ebp, ecx
 or eax, esi
 not ebp
 xor eax, ecx
 add eax, r8d
 lea r8d, [rdx + rbx + CONST]
 mov edx, ebp
 ror eax, CONST
 add eax, esi
 or edx, eax
 xor edx, esi
 add edx, r8d
 lea r8d, [rcx + r11 + CONST]
 mov ecx, esi
 mov r11d, dword [rsp + CONST]
 rol edx, CONST
 not ecx
 mov r14d, dword [rsp + CONST]
 mov ebx, dword [rsp + CONST]
 add edx, eax
 or ecx, edx
 mov ebp, edx
 xor ecx, eax
 not ebp
 add ecx, r8d
 lea r8d, [rsi + r10 + CONST]
 mov esi, eax
 mov r10d, dword [rsp + CONST]
 rol ecx, CONST
 not esi
 add ecx, edx
 or esi, ecx
 xor esi, edx
 add esi, r8d
 lea r8d, [rax + r9 + CONST]
 mov eax, ebp
 mov ebp, ecx
 rol esi, CONST
 not ebp
 mov r9d, dword [rsp + CONST]
 add esi, ecx
 or eax, esi
 xor eax, ecx
 add eax, r8d
 lea r8d, [rdx + r11 + CONST]
 mov edx, ebp
 mov r11d, dword [rsp + CONST]
 ror eax, CONST
 add eax, esi
 or edx, eax
 xor edx, esi
 add edx, r8d
 lea r8d, [rcx + r11 + CONST]
 mov ecx, esi
 rol edx, CONST
 not ecx
 add edx, eax
 or ecx, edx
 xor ecx, eax
 add ecx, r8d
 lea r8d, [rsi + r10 + CONST]
 mov esi, eax
 mov r10d, dword [rsp + CONST]
 rol ecx, CONST
 not esi
 add ecx, edx
 lea eax, [rax + r10 + CONST]
 mov r10d, edx
 or esi, ecx
 not r10d
 xor esi, edx
 lea edx, [rdx + r9 + CONST]
 mov r9d, ecx
 add esi, r8d
 mov r8d, r10d
 not r9d
 rol esi, CONST
 add esi, ecx
 or r8d, esi
 mov r11d, esi
 xor r8d, ecx
 not r11d
 lea ecx, [rcx + r14 + CONST]
 add r8d, eax
 mov eax, r9d
 ror r8d, CONST
 add r8d, esi
 or eax, r8d
 xor eax, esi
 lea esi, [rsi + rbx + CONST]
 mov ebx, dword [rsp + CONST]
 add eax, edx
 mov edx, r11d
 rol eax, CONST
 add eax, r8d
 or edx, eax
 xor edx, r8d
 add edx, ecx
 mov ecx, r8d
 lea r8d, [r8 + rbx + CONST]
 pop rbx
 rol edx, CONST
 not ecx
 pop rbp
 pop r12
 add edx, eax
 pop r13
 pop r14
 or ecx, edx
 xor ecx, eax
 add ecx, esi
 mov esi, eax
 add eax, dword [rdi]
 rol ecx, CONST
 not esi
 mov dword [rdi], eax
 add ecx, edx
 or esi, ecx
 xor esi, edx
 add esi, r8d
 mov eax, esi
 lea esi, [r15 + rcx]
 pop r15
 ror eax, CONST
 add eax, esi
 add ecx, dword [rdi + CONST]
 add edx, dword [rdi + CONST]
 mov dword [rdi + CONST], eax
 mov dword [rdi + CONST], ecx
 mov dword [rdi + CONST], edx
 ret
