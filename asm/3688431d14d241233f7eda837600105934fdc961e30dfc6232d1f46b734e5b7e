 .name sym._obstack_newchunk
 .offset 0000000000025540
 .file grep
 endbr64
 push r14
 xor eax, eax
 push r13
 push r12
 push rbp
 push rbx
 mov r14, qword [rdi + CONST]
 sub r14, qword [rdi + CONST]
 mov rbp, qword [rdi + CONST]
 add rsi, r14
 mov rdx, r14
 setb al
 add rsi, qword [rdi + CONST]
 setb cl
 shr rdx, CONST
 cmp qword [rdi], rsi
 lea r12, [rsi + rdx + CONST]
 cmovae rsi, qword [rdi]
 cmp rsi, r12
 cmovae r12, rsi
 test rax, rax
 cjmp LABEL22
 movzx ecx, cl
 test rcx, rcx
 cjmp LABEL22
 mov rax, qword [rdi + CONST]
 mov rbx, rdi
 test byte [rdi + CONST], CONST
 cjmp LABEL29
 mov rdi, r12
 call rax
 mov r13, rax
LABEL71:
 test r13, r13
 cjmp LABEL22
 mov rax, qword [rbx + CONST]
 lea rsi, [r13 + r12]
 mov qword [rbx + CONST], r13
 mov rdx, r14
 mov qword [r13 + CONST], rbp
 lea r12, [r13 + rax + CONST]
 mov qword [rbx + CONST], rsi
 not rax
 mov qword [r13], rsi
 and r12, rax
 mov rsi, qword [rbx + CONST]
 mov rdi, r12
 call CONST
 movzx edx, byte [rbx + CONST]
 test dl, CONST
 cjmp LABEL50
 mov rax, qword [rbx + CONST]
 lea rcx, [rbp + rax + CONST]
 not rax
 and rax, rcx
 cmp qword [rbx + CONST], rax
 cjmp LABEL56
LABEL50:
 add r14, r12
 and byte [rbx + CONST], CONST
 mov qword [rbx + CONST], r12
 mov qword [rbx + CONST], r14
 pop rbx
 pop rbp
 pop r12
 pop r13
 pop r14
 ret
LABEL29:
 mov rdi, qword [rdi + CONST]
 mov rsi, r12
 call rax
 mov r13, rax
 jmp LABEL71
LABEL56:
 mov rax, qword [rbp + CONST]
 and edx, CONST
 mov qword [r13 + CONST], rax
 mov rax, qword [rbx + CONST]
 cjmp LABEL76
 mov rdi, qword [rbx + CONST]
 mov rsi, rbp
 call rax
 jmp LABEL50
LABEL76:
 mov rdi, rbp
 call rax
 jmp LABEL50
LABEL22:
 call qword [rip + CONST]
 nop word cs:[rax + rax]
